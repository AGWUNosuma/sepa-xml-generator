Metadata-Version: 2.4
Name: sepa-xml-generator
Version: 0.1.0
Summary: GUI + CLI tool to generate SEPA pain.001 XML from CSV files
Author-email: Your Name <you@example.com>
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PySide6>=6.7
Requires-Dist: lxml>=5
Requires-Dist: pydantic>=2.6
Requires-Dist: typer>=0.12
Requires-Dist: rich>=13
Requires-Dist: PyYAML>=6
Provides-Extra: dev
Requires-Dist: pytest>=8; extra == "dev"
Requires-Dist: pytest-qt>=4; extra == "dev"
Requires-Dist: ruff>=0.6; extra == "dev"
Requires-Dist: black>=24; extra == "dev"
Requires-Dist: mypy>=1.10; extra == "dev"
Requires-Dist: pre-commit>=3; extra == "dev"
Dynamic: license-file

# SEPA XML Generator

A small, well-structured Python project that turns CSV payment data into SEPA **pain.001 Credit Transfer** XML.
It includes both a **Qt GUI (PySide6)** and a **Typer CLI**, a thin domain layer, and optional XSD validation.

> ⚠️ Banks vary in the **pain.001 version** they accept (e.g., `pain.001.001.03` vs `pain.001.001.09`). Make this configurable and confirm with your bank.

## Quick start

```bash
# From this folder
python -m venv .venv
source .venv/bin/activate   # Windows: .venv\Scripts\activate

pip install -e ".[dev]"

# Run GUI
python -m sepa_xml_generator.main_qt

# Or use CLI
sepa-xml-generator convert data/sample.csv --mapping data/mapping.sample.yaml --out output.xml
```

## Project structure

```
sepa-xml-generator/
├─ src/sepa_xml_generator/
│  ├─ ui/                 # Qt widgets and presentation logic
│  ├─ core/               # CSV loading, mapping, domain models
│  ├─ sepa/               # XML builders and optional XSD validation
│  ├─ config/             # Config schemas and defaults
│  ├─ cli.py              # Typer CLI entry
│  ├─ main_qt.py          # GUI entry
│  └─ __init__.py
├─ data/                  # Sample CSV and mapping config
├─ schemas/               # (Optional) Bank-provided XSDs for validation
├─ tests/                 # Pytest
├─ README.md
├─ pyproject.toml
└─ .pre-commit-config.yaml
```

## CSV format (example)

See [`data/sample.csv`](data/sample.csv). Map your columns to SEPA fields through
[`data/mapping.sample.yaml`](data/mapping.sample.yaml).

## Validation

If you place the appropriate ISO20022 XSD (e.g., `pain.001.001.03.xsd`) in `schemas/`, the app can validate the
generated XML. If no XSD is present, validation is skipped.

## Development tips

- Keep GUI thin; use services in `core/` and builders in `sepa/`.
- Add other schemas (e.g., `pain.008` for Direct Debit) behind the same interface.
- Prefer `--force-with-lease` if you need to rewrite history.
